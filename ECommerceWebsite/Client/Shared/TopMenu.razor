@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@implements IDisposable
@*
@inject IProductService ProductService
@inject NavigationManager NavigationManager

@inject ILocalStorageService LocalStorage*@
<a href="cart" class="btn btn-info">
    <i class="oi oi-cart"></i>
    Cart
    <span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>
@code {
    protected override void OnInitialized() {
        CartService.OnChange += StateHasChanged;
        //StateHasChanged;     Notifies the component that its state has changed. When applicable, this will
        //     cause the component to be re-rendered.
        //StateHasChanged will be called when the onchange event is invoked
    }
    public void Dispose() {
         CartService.OnChange -= StateHasChanged;
    }
    private int GetProductCount() {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

}
